#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os
import subprocess
import logging

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
def import_certificate():
    """Copies certificates to container and imports them."""

    try:
        # Copy certificates to container
        subprocess.run(["podman", "exec", "goauthentik-app", "sh", "-c", "cp /certificates/key.pem /certs/key.pem"], check=True)
        subprocess.run(["podman", "exec", "goauthentik-app", "sh", "-c", "cp /certificates/cert.pem /certs/cert.pem"], check=True)

        # Check for file existence
        if not check_file_existence("/certs/key.pem") or not check_file_existence("/certs/cert.pem"):
            if not check_file_existence("/certs/key.pem") and not check_file_existence("/certs/cert.pem"):
                logging.error("Error: Both certificate files missing in container.")
                exit(1)
            else:
                logging.warning("Warning: One certificate file missing in container.")

        # Import certificate
        subprocess.run(["podman", "exec", "goauthentik-app", "ak", "import_certificate", "--certificate", "/certs/cert.pem", "--private-key", "/certs/key.pem", "--name", "goauthentik"], check=True)

    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to import certificate: {e.returncode}")
        exit(1)

def check_file_existence(file_path):
    """Checks if a file exists within the container."""

    result = subprocess.run(["podman", "exec", "goauthentik-app", "sh", "-c", f"[ -f {file_path} ]"], capture_output=True, text=True)
    return result.returncode == 0

if __name__ == "__main__":
    logging.basicConfig(filename="certificate_import.log", level=logging.INFO)
    import_certificate()